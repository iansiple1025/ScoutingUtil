{"ast":null,"code":"var _jsxFileName = \"/Users/iansiple/Documents/impi-scouting-util_ui/src/Components/DashboardScreen/DashboardScreen.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardScreen = () => {\n  _s();\n  const [teamData, setTeamData] = useState([]);\n  const [selectedMetric, setSelectedMetric] = useState('avgNotesScoredInTeleop');\n  const [loading, setLoading] = useState(true);\n  const [compCode, setCompCode] = useState('defaultCompCode'); // Set a default compCode\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/impi/${compCode}/getAllTeamAverages`);\n        setTeamData(response.data);\n      } catch (error) {\n        console.error('Error fetching team data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [compCode]);\n  const handleMetricChange = event => {\n    setSelectedMetric(event.target.value);\n  };\n  const handleCompCodeChange = event => {\n    setCompCode(event.target.value);\n  };\n  const chartData = {\n    labels: teamData.map(team => `Team ${team.teamNumber}`),\n    datasets: [{\n      label: selectedMetric,\n      data: teamData.map(team => team[selectedMetric]),\n      backgroundColor: 'rgba(75,192,192,0.6)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderWidth: 1\n    }]\n  };\n  const chartOptions = {\n    responsive: true,\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Team Performance Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardScreen, \"StoUG2AEalc78B1tc89nV8jSIaE=\");\n_c = DashboardScreen;\nexport default DashboardScreen;\nvar _c;\n$RefreshReg$(_c, \"DashboardScreen\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","DashboardScreen","_s","teamData","setTeamData","selectedMetric","setSelectedMetric","loading","setLoading","compCode","setCompCode","fetchData","response","get","data","error","console","handleMetricChange","event","target","value","handleCompCodeChange","chartData","labels","map","team","teamNumber","datasets","label","backgroundColor","borderColor","borderWidth","chartOptions","responsive","scales","y","beginAtZero","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/iansiple/Documents/impi-scouting-util_ui/src/Components/DashboardScreen/DashboardScreen.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport { ChartData, ChartOptions } from 'chart.js';\n\ninterface TeamData {\n  teamNumber: number;\n  avgNotesScoredInTeleop: number;\n  avgNotesScoredInAuton: number;\n  avgNotesScoredInAmp: number;\n  avgNotesFed: number;\n}\n\nconst DashboardScreen: React.FC = () => {\n  const [teamData, setTeamData] = useState<TeamData[]>([]);\n  const [selectedMetric, setSelectedMetric] = useState<string>('avgNotesScoredInTeleop');\n  const [loading, setLoading] = useState<boolean>(true);\n  const [compCode, setCompCode] = useState<string>('defaultCompCode'); // Set a default compCode\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/impi/${compCode}/getAllTeamAverages`);\n        setTeamData(response.data);\n      } catch (error) {\n        console.error('Error fetching team data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [compCode]);\n\n  const handleMetricChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedMetric(event.target.value);\n  };\n\n  const handleCompCodeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCompCode(event.target.value);\n  };\n\n  const chartData: ChartData<'bar'> = {\n    labels: teamData.map(team => `Team ${team.teamNumber}`),\n    datasets: [\n      {\n        label: selectedMetric,\n        data: teamData.map(team => team[selectedMetric as keyof TeamData]),\n        backgroundColor: 'rgba(75,192,192,0.6)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const chartOptions: ChartOptions<'bar'> = {\n    responsive: true,\n    scales: {\n      y: {\n        beginAtZero: true,\n      },\n    },\n  };\n\n  return (\n    <div>\n      <h1>Team Performance Dashboard</h1>\n\n      {/* <label htmlFor=\"compCode-input\">Competition Code:</label>\n      <input\n        id=\"compCode-input\"\n        type=\"text\"\n        value={compCode}\n        onChange={handleCompCodeChange}\n      />\n\n      <label htmlFor=\"metric-select\">Select Metric:</label>\n      <select id=\"metric-select\" value={selectedMetric} onChange={handleMetricChange}>\n        <option value=\"avgNotesScoredInTeleop\">Avg Notes Scored In Teleop</option>\n        <option value=\"avgNotesScoredInAuton\">Avg Notes Scored In Auton</option>\n        <option value=\"avgNotesScoredInAmp\">Avg Notes Scored In Amp</option>\n        <option value=\"avgNotesFed\">Avg Notes Fed</option>\n      </select> */}\n\n      {/* {loading ? (\n        <p>Loading data...</p>\n      ) : (\n        <div>\n          <Bar data={chartData} options={chartOptions} />\n\n          <h2>Team Rankings</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>Team Number</th>\n                <th>Avg Notes Scored In Teleop</th>\n                <th>Avg Notes Scored In Auton</th>\n                <th>Avg Notes Scored In Amp</th>\n                <th>Avg Notes Fed</th>\n              </tr>\n            </thead>\n            <tbody>\n              {teamData\n                .sort((a, b) => b[selectedMetric as keyof TeamData] - a[selectedMetric as keyof TeamData])\n                .map((team) => (\n                  <tr key={team.teamNumber}>\n                    <td>{team.teamNumber}</td>\n                    <td>{team.avgNotesScoredInTeleop}</td>\n                    <td>{team.avgNotesScoredInAuton}</td>\n                    <td>{team.avgNotesScoredInAmp}</td>\n                    <td>{team.avgNotesFed}</td>\n                  </tr>\n                ))}\n            </tbody>\n          </table> */}\n        {/* </div>\n      )} */}\n    </div>\n  );\n};\n\nexport default DashboardScreen;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAY1B,MAAMC,eAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAa,EAAE,CAAC;EACxD,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAS,wBAAwB,CAAC;EACtF,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAS,iBAAiB,CAAC,CAAC,CAAC;;EAErED,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAE,8BAA6BJ,QAAS,qBAAoB,CAAC;QAC7FL,WAAW,CAACQ,QAAQ,CAACE,IAAI,CAAC;MAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD,CAAC,SAAS;QACRP,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC;EAEd,MAAMQ,kBAAkB,GAAIC,KAA2C,IAAK;IAC1EZ,iBAAiB,CAACY,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACvC,CAAC;EAED,MAAMC,oBAAoB,GAAIH,KAA0C,IAAK;IAC3ER,WAAW,CAACQ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;EAED,MAAME,SAA2B,GAAG;IAClCC,MAAM,EAAEpB,QAAQ,CAACqB,GAAG,CAACC,IAAI,IAAK,QAAOA,IAAI,CAACC,UAAW,EAAC,CAAC;IACvDC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAEvB,cAAc;MACrBS,IAAI,EAAEX,QAAQ,CAACqB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACpB,cAAc,CAAmB,CAAC;MAClEwB,eAAe,EAAE,sBAAsB;MACvCC,WAAW,EAAE,oBAAoB;MACjCC,WAAW,EAAE;IACf,CAAC;EAEL,CAAC;EAED,MAAMC,YAAiC,GAAG;IACxCC,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,WAAW,EAAE;MACf;IACF;EACF,CAAC;EAED,oBACEpC,OAAA;IAAAqC,QAAA,eACErC,OAAA;MAAAqC,QAAA,EAAI;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAmDhC,CAAC;AAEV,CAAC;AAACvC,EAAA,CAzGID,eAAyB;AAAAyC,EAAA,GAAzBzC,eAAyB;AA2G/B,eAAeA,eAAe;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}